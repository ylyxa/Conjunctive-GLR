S ::= Expr;pass_through_as_list
Expr ::= Redex;pass_through_as_list
Expr ::= Lambda;pass_through_as_list
Expr ::= lbr NoLambda blank Expr rbr;pass_through_as_list
Expr ::= VarName;pass_through
NoLambda ::= VarName;pass_through_as_list
NoLambda ::= Redex;pass_through_as_list
NoLambda ::= lbr NoLambda blank Expr rbr;pass_through_as_list
Redex ::= lbr llbr lamsym VarName dot Expr rlbr blank Expr rbr;reduce
Lambda ::= llbr lamsym VarName dot Expr rlbr;pass_through_as_list
lbr ::= \(
rbr ::= \)
llbr ::= \[
lamsym ::= \\
rlbr ::= \]
dot ::= \->
blank ::= \s
x ::= x
y ::= y
z ::= z
Var ::= x|y|z;pass_through_as_list
VarName ::= Var;pass_through
VarName ::= Var VarName;concat
Delim ::= lbr|rbr|blank|rlbr;pass_through_as_list
AllVarsDecl ::= AllVarsDecl Delim;pass_through_as_list
AllVarsDecl ::= AllVarsDecl Delim VarName & ThisVarDecl;pass_through_as_list
AllVarsDecl ::= AllVarsDecl llbr lamsym VarName dot VarName & ThisVarDecl;pass_through_as_list
AllVarsDecl ::= AllVarsDecl llbr lamsym VarName dot;pass_through_as_list
AllVarsDecl ::= _;pass_through_as_list
ThisVarDecl ::= Expr ThisVarDecl;pass_through_as_list
ThisVarDecl ::= lbr ThisVarDecl;pass_through_as_list
ThisVarDecl ::= blank ThisVarDecl;pass_through_as_list
ThisVarDecl ::= llbr lamsym VarNames;pass_through_as_list
ThisVarDecl ::= llbr lamsym VarName dot ThisVarDecl;pass_through_as_list
VarNames ::= EqX & Equality;pass_through_as_list
EqX ::= Var EqX Var|dot InLambda Delim|dot InLambda llbr lamsym VarName dot|dot;pass_through_as_list
Equality ::= x X & x Equality|y Y & y Equality|z Z & z Equality|dot InLambda;pass_through_as_list
X ::= Var X Var|dot InLambda x;pass_through_as_list
Y ::= Var Y Var|dot InLambda y;pass_through_as_list
Z ::= Var Z Var|dot InLambda z;pass_through_as_list
InLambda ::= Expr InLambda;pass_through_as_list
InLambda ::= lbr InLambda;pass_through_as_list
InLambda ::= llbr lamsym VarName dot InLambda;pass_through_as_list
InLambda ::= blank InLambda;pass_through_as_list
InLambda ::= _;pass_through_as_list